# Makefile para aplica√ß√£o CCB
# Aplica√ß√£o est√°tica HTML/CSS/JavaScript

.PHONY: help build build-prod build-dev clean serve deploy-docker deploy-ssh deploy-ftp validate compress start

# Vari√°veis
BUILD_DIR := dist
PORT := 8000
TIMESTAMP := $(shell date +%Y%m%d-%H%M%S)

# Comando padr√£o
help: ## Exibe esta ajuda
	@echo "üöÄ CCB Application - Comandos dispon√≠veis:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Instala depend√™ncias (se houver package.json)
	@if [ -f package.json ]; then \
		echo "üì¶ Instalando depend√™ncias do npm..."; \
		npm install; \
	else \
		echo "‚ÑπÔ∏è  Nenhuma depend√™ncia npm para instalar"; \
	fi

validate: ## Valida a estrutura do projeto
	@echo "üîç Validando estrutura do projeto..."
	@test -f quiz.html || (echo "‚ùå quiz.html n√£o encontrado" && exit 1)
	@test -d cep || (echo "‚ùå Diret√≥rio cep n√£o encontrado" && exit 1)
	@test -d images || (echo "‚ùå Diret√≥rio images n√£o encontrado" && exit 1)
	@echo "‚úÖ Estrutura do projeto validada"

clean: ## Limpa o diret√≥rio de build
	@echo "üßπ Limpando diret√≥rio de build..."
	@rm -rf $(BUILD_DIR)
	@echo "‚úÖ Limpeza conclu√≠da"

build: ## Build b√°sico da aplica√ß√£o
	@chmod +x build.sh
	@./build.sh

build-dev: ## Build para desenvolvimento
	@chmod +x build.sh
	@./build.sh -c -d

build-prod: ## Build para produ√ß√£o (otimizado)
	@chmod +x build.sh
	@./build.sh -c -p

serve: build-dev ## Inicia servidor de desenvolvimento
	@chmod +x build.sh
	@./build.sh -d -s

start: ## Inicia servidor local simples
	@echo "üåê Iniciando servidor na porta $(PORT)..."
	@if command -v python3 >/dev/null 2>&1; then \
		echo "üì° Servidor dispon√≠vel em: http://localhost:$(PORT)"; \
		python3 -m http.server $(PORT); \
	elif command -v php >/dev/null 2>&1; then \
		echo "üì° Servidor dispon√≠vel em: http://localhost:$(PORT)"; \
		php -S localhost:$(PORT); \
	elif command -v node >/dev/null 2>&1; then \
		echo "üì° Servidor dispon√≠vel em: http://localhost:$(PORT)"; \
		npx http-server -p $(PORT); \
	else \
		echo "‚ùå Nenhum servidor dispon√≠vel. Instale Python3, PHP ou Node.js"; \
	fi

# Deploy targets
deploy-docker: build-prod ## Deploy usando Docker
	@echo "üê≥ Fazendo deploy com Docker..."
	@cd $(BUILD_DIR) && docker-compose up -d
	@echo "‚úÖ Deploy Docker conclu√≠do"

deploy-ssh: build-prod ## Deploy via SSH (configure primeiro)
	@echo "üì§ Deploy via SSH..."
	@cd $(BUILD_DIR) && chmod +x deploy-ssh.sh && ./deploy-ssh.sh

deploy-ftp: build-prod ## Deploy via FTP (configure primeiro)
	@echo "üì§ Deploy via FTP..."
	@cd $(BUILD_DIR) && chmod +x deploy-ftp.sh && ./deploy-ftp.sh

# Utilit√°rios
compress: build-prod ## Comprime o build em arquivo tar.gz
	@echo "üì¶ Comprimindo aplica√ß√£o..."
	@cd $(BUILD_DIR) && tar -czf ../ccb-application-$(TIMESTAMP).tar.gz .
	@echo "‚úÖ Arquivo criado: ccb-application-$(TIMESTAMP).tar.gz"

size: ## Mostra o tamanho dos arquivos
	@echo "üìè Tamanho dos arquivos:"
	@du -sh . --exclude=node_modules --exclude=$(BUILD_DIR) 2>/dev/null || du -sh .
	@if [ -d $(BUILD_DIR) ]; then \
		echo "üìÅ Build: $$(du -sh $(BUILD_DIR) | cut -f1)"; \
	fi

test: validate ## Executa testes b√°sicos
	@echo "üß™ Executando testes..."
	@echo "  ‚úì Valida√ß√£o da estrutura"
	@find . -name "*.html" -not -path "./$(BUILD_DIR)/*" -not -path "./node_modules/*" | head -5 | while read file; do \
		echo "  ‚úì HTML encontrado: $$file"; \
	done
	@echo "‚úÖ Testes b√°sicos conclu√≠dos"

watch: ## Observa mudan√ßas e reconstr√≥i automaticamente (requer inotify-tools)
	@echo "üëÄ Observando mudan√ßas nos arquivos..."
	@if command -v inotifywait >/dev/null 2>&1; then \
		while inotifywait -r -e modify,create,delete --exclude '$(BUILD_DIR)' .; do \
			echo "üîÑ Mudan√ßa detectada, reconstruindo..."; \
			make build-dev; \
		done; \
	else \
		echo "‚ùå inotifywait n√£o encontrado. Instale: sudo apt install inotify-tools"; \
	fi

info: ## Exibe informa√ß√µes do projeto
	@echo "üìã Informa√ß√µes do Projeto CCB"
	@echo "=============================="
	@echo "Tipo: Aplica√ß√£o Web Est√°tica"
	@echo "Tecnologias: HTML, CSS, JavaScript"
	@echo "Arquivo principal: quiz.html"
	@echo "Diret√≥rio de build: $(BUILD_DIR)"
	@echo "Porta padr√£o: $(PORT)"
	@echo ""
	@echo "üóÇÔ∏è  Estrutura principal:"
	@ls -la | grep '^d' | awk '{print "  üìÅ " $$9}' | grep -v '^\.\$$\|^\.\.\$$'
	@echo ""
	@echo "üìÑ Arquivos principais:"
	@ls -la *.html *.md 2>/dev/null | awk '{print "  üìÑ " $$9}' || echo "  (nenhum arquivo .html/.md na raiz)"

lint: ## Verifica problemas b√°sicos nos arquivos
	@echo "üîç Verificando arquivos..."
	@find . -name "*.html" -not -path "./$(BUILD_DIR)/*" -not -path "./node_modules/*" | while read file; do \
		if grep -q "console.log" "$$file"; then \
			echo "‚ö†Ô∏è  Console.log encontrado em: $$file"; \
		fi; \
		if grep -q "alert(" "$$file"; then \
			echo "‚ö†Ô∏è  Alert encontrado em: $$file"; \
		fi; \
	done
	@echo "‚úÖ Verifica√ß√£o conclu√≠da"

# Atalhos
dev: build-dev ## Atalho para build-dev
prod: build-prod ## Atalho para build-prod
up: serve ## Atalho para serve

# Para desenvolvimento r√°pido
quick: clean build-dev start ## Build dev + start r√°pido
